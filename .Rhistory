initialize_game <- function(n_players) {
#tile names
board <- c("Go", "Mediterranean Avenue", "Community Chest", "Baltic Avenue", "Income Tax",
"Reading Railroad", "Oriental Avenue", "Chance", "Vermont Avenue", "Connecticut Avenue",
"Jail", "St. Charles Place", "Electric Company", "States Avenue", "Virginia Avenue", "Pennsylvania Railroad",
"St. James Place", "Community Chest",  "Tennessee Avenue", "New York Avenue", "Free Parking",
"Kentucky Avenue", "Chance", "Indiana Avenue", "Illinois Avenue", "B&O Railroad",
"Atlantic Avenue", "Ventnor Avenue", "Water Works", "Marvin Gardens", "Go to Jail",
"Pacific Avenue", "North Carolina Avenue", "Community Chest", "Pennsylvania Avenue", "Short Line Railroad", "Chance",
"Park Place", "Luxury Tax", "Boardwalk"
)
#tile values
property_values <- c(
NA, 60, NA, 60, NA,
200, 100, NA, 100, 120,
NA, 140, 150, 140, 160, 200,
180, NA, 180, 200, NA,
220, NA, 220, 240, 200,
260, 260, 150, 280, NA,
300, 300, NA, 320, 200,
NA, 350, 100, 400
)
#combine in dataframe
monopoly_board <- data.frame(
Position = 1:length(board),
Name = board,
PropertyValue = property_values,
Owner = NA
)
players <- data.frame(
ID = 1:n_players,
#start at "Go" (position 1)
Position = rep(1, n_players),
#start with $1,500 per player
Cash = rep(1500, n_players)
)
return(list(monopoly_board = monopoly_board, players = players))
}
taxed_spaces <- c("Luxury Tax", "Income Tax")
special_tiles <- c("Chance", "Community Chest")
initialize_game(2)$monopoly_board
game <- function(n_players) {
game_data <- initialize_game(n_players)
monopoly_board <- game_data$monopoly_board
players <- game_data$players
rounds <- 0
while (nrow(monopoly_board[!is.na(monopoly_board$Owner), ]) < 28) {
rounds <- rounds + 1
#cat(sprintf("\n-- Round %d --\n", rounds))
for (player in 1:n_players){
dice_roll <- sum(sample(1:6, 2, replace = TRUE))
position_update <- players$Position[player] + dice_roll
#if player passes go, they get $200
if (position_update > length(monopoly_board)) {
position_update <- (position_update - 1) %% length(monopoly_board) + 1
players$Cash[player] <- players$Cash[player] + 200
}
players$Position[player] <- position_update
landed_property <- monopoly_board$Name[position_update]
if (landed_property == "Go to Jail") {
jail_space <- which(monopoly_board$Name == "Jail")
players$Position[player] <- jail_space
} else if (landed_property %in% taxed_spaces) {
# Handle special space payments
if (landed_property == "Luxury Tax") {
players$Cash[player] <- players$Cash[player] - 100
#cat(sprintf("Player %d landed on Luxury Tax and paid $100\n", player))
} else if (landed_property == "Income Tax") {
players$Cash[player] <- players$Cash[player] - 200
#cat(sprintf("Player %d landed on Income Tax and paid $200\n", player))
} else if (landed_property == "Electric Company") {
players$Cash[player] <- players$Cash[player] - 150
#cat(sprintf("Player %d landed on Electric Company and paid $150\n", player))
}
} else {
#check property on the new position
prop_index <- position_update
if (prop_index > nrow(monopoly_board) || prop_index < 1) {
#cat(sprintf("Invalid property index: %d\n", prop_index))
next
}
prop_value <- monopoly_board$PropertyValue[prop_index]
prop_owner <- monopoly_board$Owner[prop_index]
#if player lands on a property that is not owned, purchase it
if (!is.na(prop_value)) {
if (is.na(prop_owner)) {
if (players$Cash[player] >= prop_value) {
players$Cash[player] <- players$Cash[player] - prop_value
monopoly_board$Owner[prop_index] <- player}
#cat(sprintf("Player %d bought %s for $%d\n", player, monopoly_board$Name[prop_index], prop_value))
}
}
}
}}
return(list(rounds = rounds, cash = players$Cash))
}
nsim <- 100
rounds_list <- numeric(nsim)
cash_list <- matrix(0, nrow = nsim, ncol = 2)
for (i in 1:nsim) {
result <- game(n_players = 2)
rounds_list[i] <- result$rounds
cash_list[i, ] <- result$cash
}
print(3)
nsim <- 100
rounds_list <- numeric(nsim)
cash_list <- matrix(0, nrow = nsim, ncol = 2)
for (i in 1:nsim) {
result <- game(n_players = 2)
rounds_list[i] <- result$rounds
cash_list[i, ] <- result$cash
}
