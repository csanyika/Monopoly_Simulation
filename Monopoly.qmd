---
title: "Monopoly"
format: html
editor: visual
---

## Define the board

```{r}
#tile names
board <- c(
  "Go", "Mediterranean Avenue", "Community Chest", "Baltic Avenue", "Income Tax",
  "Reading Railroad", "Oriental Avenue", "Chance", "Vermont Avenue", "Connecticut Avenue",
  "Jail", "St. Charles Place", "Electric Company", "States Avenue", "Virginia Avenue", "Pennsylvania Railroad",
  "St. James Place", "Community Chest",  "Tennessee Avenue", "New York Avenue", "Free Parking",
  "Kentucky Avenue", "Chance", "Indiana Avenue", "Illinois Avenue", "B&O Railroad",
  "Atlantic Avenue", "Ventnor Avenue", "Water Works", "Marvin Gardens", "Go to Jail",
  "Pacific Avenue", "North Carolina Avenue", "Community Chest", "Pennsylvania Avenue", "Short Line Railroad", "Chance",
  "Park Place", "Luxury Tax", "Boardwalk"
)

#tile values
property_values <- c(
  NA, 60, NA, 60, NA,
  200, 100, NA, 100, 120,
  NA, 140, 150, 140, 160, 200,
  180, NA, 180, 200, NA,
  220, NA, 220, 240, 200,
  260, 260, 150, 280, NA,
  300, 300, NA, 320, 200,
  350, NA, 100, 400
)

#combine in dataframe
monopoly_board <- data.frame(
  Position = 1:length(board),
  Name = board,
  PropertyValue = property_values,
  Owner = NA
)
monopoly_board

jail
taxed_spaces <- c("Luxury Tax", "Income Tax")
special_tiles <- c("Chance", "Community Chest")
```

## Simulating a Game

```{r}
n_players <- 2
rounds <- 10

players <- data.frame(
  #allocate a ID number to each player
  ID = 1:n_players,
  Position = rep(1, n_players),
  #amount of money each player has
  Cash = rep(1500, n_players)
)

for (round in 1:rounds) {
  for (player in 1:n_players){
    dice_roll <- sum(sample(1:6, 2, replace = TRUE))
    position_update <- players$Position[player] + dice_roll
    #if player passes go, they get $200
    if (position_update > length(board)) {
      position_update <- position_update %% length(board)
      players$Cash[player] <- players$Cash[player] + 200
    }
    players$Position[player] <- position_update
    
    landed_property <- monopoly_board$Name[position_update]
    
    if (landed_property == "Go to Jail") {
      jail_pos <- which(monopoly_board$Name == "Jail")
      players$Position[player] <- jail_position
    } else if (landed_property %in% taxed_spaces) {
      # Handle special space payments
      if (landed_property == "Luxury Tax") {
        players$Cash[player] <- players$Cash[player] - 100
        cat(sprintf("Player %d landed on Luxury Tax and paid $100\n", player))
      } else if (landed_property == "Income Tax") {
        players$Cash[player] <- players$Cash[player] - 200
        cat(sprintf("Player %d landed on Income Tax and paid $200\n", player))
      } else if (landed_property == "Electric Company") {
        players$Cash[player] <- players$Cash[player] - 150
        cat(sprintf("Player %d landed on Electric Company and paid $150\n", player))
      }
    } else {#check property on the new position
      prop_index <- position_update
    if (prop_index > nrow(monopoly_board) || prop_index < 1) {
      cat(sprintf("Invalid property index: %d\n", prop_index))
      next  # Skip invalid indices
    }
    
    prop_value <- monopoly_board$PropertyValue[prop_index]
    prop_owner <- monopoly_board$Owner[prop_index]
    
    #if player lands on a property that is not owned, purchase it
    if (!is.na(prop_value)) {
      if (is.na(prop_owner)) {
        if (players$Cash[player] >= prop_value) {
          players$Cash[player] <- players$Cash[player] - prop_value
          monopoly_board$Owner[prop_index] <- player
          cat(sprintf("Player %d bought %s for $%d\n", player, monopoly_board$Name[prop_index], prop_value))
        } else {
          cat(sprintf("Player %d can't afford %s (Cost: $%d, Cash: $%d)\n", player, monopoly_board$Name[prop_index], prop_value, players$Cash[player]))
        }
      } else {
        cat(sprintf("Player %d landed on %s, owned by Player %d\n", player, monopoly_board$Name[prop_index], prop_owner))
      }
    }
  }
}}

print(monopoly_board[!is.na(monopoly_board$Owner), ])
```

```{r}
for (round in 1:rounds) {
  for (player in 1:n_players) {
    # Roll two dice
    dice_roll <- sum(sample(1:6, 2, replace = TRUE))
    position_update <- players$Position[player] + dice_roll
    
    # If player passes Go, they get $200
    if (position_update > nrow(monopoly_board)) {
      position_update <- position_update %% nrow(monopoly_board)
      players$Cash[player] <- players$Cash[player] + 200
    }
    # Ensure position_update is never zero
    if (position_update == 0) {
      position_update <- nrow(monopoly_board)
    }
    players$Position[player] <- position_update
    
    # Check the property at the updated position
    prop_index <- position_update
    if (prop_index > 0 && prop_index <= nrow(monopoly_board)) {
      prop_value <- monopoly_board$PropertyValue[prop_index]
      prop_owner <- monopoly_board$Owner[prop_index]
      
      # If the property has a value and no owner, attempt purchase
      if (!is.na(prop_value)) {
        if (is.na(prop_owner)) {
          if (players$Cash[player] >= prop_value) {  # Player can afford
            players$Cash[player] <- players$Cash[player] - prop_value
            monopoly_board$Owner[prop_index] <- player
            cat(sprintf("Player %d bought %s for $%d\n", 
                        player, monopoly_board$Name[prop_index], prop_value))
          } else {  # Player cannot afford the property
            cat(sprintf("Player %d can't afford %s (Cost: $%d, Cash: $%d)\n", 
                        player, monopoly_board$Name[prop_index], prop_value, players$Cash[player]))
          }
        } else {  # Property is owned
          cat(sprintf("Player %d landed on %s, owned by Player %d\n", 
                      player, monopoly_board$Name[prop_index], prop_owner))
        }
      }
    } else {
      cat(sprintf("Invalid property index: %d\n", prop_index))
    }
  }
}
```

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
