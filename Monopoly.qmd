---
title: "Monopoly"
format: html
editor: visual
---

## Define the board

```{r}

initialize_game <- function(n_players) {
  #tile names
  board <- c("Go", "Mediterranean Avenue", "Community Chest", "Baltic Avenue", "Income Tax",
  "Reading Railroad", "Oriental Avenue", "Chance", "Vermont Avenue", "Connecticut Avenue",
  "Jail", "St. Charles Place", "Electric Company", "States Avenue", "Virginia Avenue", "Pennsylvania Railroad",
  "St. James Place", "Community Chest",  "Tennessee Avenue", "New York Avenue", "Free Parking",
  "Kentucky Avenue", "Chance", "Indiana Avenue", "Illinois Avenue", "B&O Railroad",
  "Atlantic Avenue", "Ventnor Avenue", "Water Works", "Marvin Gardens", "Go to Jail",
  "Pacific Avenue", "North Carolina Avenue", "Community Chest", "Pennsylvania Avenue", "Short Line Railroad", "Chance",
  "Park Place", "Luxury Tax", "Boardwalk"
)

#tile values
property_values <- c(
  NA, 60, NA, 60, NA,
  200, 100, NA, 100, 120,
  NA, 140, 150, 140, 160, 200,
  180, NA, 180, 200, NA,
  220, NA, 220, 240, 200,
  260, 260, 150, 280, NA,
  300, 300, NA, 320, 200,
  NA, 350, 100, 400
)

#combine in dataframe
monopoly_board <- data.frame(
  Position = 1:length(board),
  Name = board,
  PropertyValue = property_values,
  Owner = NA
)

taxed_spaces <- c("Luxury Tax", "Income Tax")
special_tiles <- c("Chance", "Community Chest")
players <- data.frame(
    ID = 1:n_players,
    #start at "Go" (position 1)
    Position = rep(1, n_players),
    #start with $1,500 per player
    Cash = rep(1500, n_players)
  )
  
  return(list(monopoly_board = monopoly_board, players = players))
}
```

## Simulating a Game

```{r}
game <- function(n_players) {
  game_data <- initialize_game(n_players)
  monopoly_board <- game_data$monopoly_board
  players <- game_data$players
  
  rounds <- 0
  while (nrow(monopoly_board[!is.na(monopoly_board$Owner), ]) < 28) {
    rounds <- rounds + 1
    #cat(sprintf("\n-- Round %d --\n", rounds))
  for (player in 1:n_players){
    dice_roll <- sum(sample(1:6, 2, replace = TRUE))
    position_update <- players$Position[player] + dice_roll
    #if player passes go, they get $200
    if (position_update > length(board)) {
      position_update <- position_update %% length(board)
      players$Cash[player] <- players$Cash[player] + 200
    }
    players$Position[player] <- position_update
    
    landed_property <- monopoly_board$Name[position_update]
    
    if (landed_property == "Go to Jail") {
      jail_space <- which(monopoly_board$Name == "Jail")
      players$Position[player] <- jail_space
    } else if (landed_property %in% taxed_spaces) {
      # Handle special space payments
      if (landed_property == "Luxury Tax") {
        players$Cash[player] <- players$Cash[player] - 100
        #cat(sprintf("Player %d landed on Luxury Tax and paid $100\n", player))
      } else if (landed_property == "Income Tax") {
        players$Cash[player] <- players$Cash[player] - 200
        #cat(sprintf("Player %d landed on Income Tax and paid $200\n", player))
      } else if (landed_property == "Electric Company") {
        players$Cash[player] <- players$Cash[player] - 150
        #cat(sprintf("Player %d landed on Electric Company and paid $150\n", player))
      }
    } else {
      #check property on the new position
      prop_index <- position_update
    if (prop_index > nrow(monopoly_board) || prop_index < 1) {
      #cat(sprintf("Invalid property index: %d\n", prop_index))
      next
    }
    
    prop_value <- monopoly_board$PropertyValue[prop_index]
    prop_owner <- monopoly_board$Owner[prop_index]
    
    #if player lands on a property that is not owned, purchase it
    if (!is.na(prop_value)) {
      if (is.na(prop_owner)) {
        if (players$Cash[player] >= prop_value) {
          players$Cash[player] <- players$Cash[player] - prop_value
          monopoly_board$Owner[prop_index] <- player}
          #cat(sprintf("Player %d bought %s for $%d\n", player, monopoly_board$Name[prop_index], prop_value))
        }
    }
  }
  }}
  return(rounds)
  #cat("\nAll properties have been purchased.\n")
  #cat(sprintf("Total number of rounds: %d\n", rounds))
  #cat("\nPlayers' Cash:\n")
  #print(players)
  #cat("\nMonopoly Board with Ownership:\n")
  #print(monopoly_board)
}
```

## Mean number of rounds for all properties to be purchased with 2 players

```{r}
nsim <- 10000
rounds_list <- numeric(nsim)
for (i in 1:nsim) {
  rounds_list[i] <- game(n_players = 2)}

mean_rounds_result <- mean(rounds_list)
cat(sprintf("\nMean number of rounds across %d simulations: %.2f\n", nsim, mean_rounds_result))
```

```{r}
hist(rounds_list, 
     main = "Number of Rounds Across Simulations",
     xlab = "Number of Rounds", 
     ylab = "Frequency",
     col = "lightblue", 
     border = "black")

boxplot(rounds_list, 
        main = "Boxplot of Number of Rounds Across Simulations",
        ylab = "Number of Rounds",
        col = "lightblue", 
        border = "black")

```

## Mean number of rounds for all properties to be purchased with varying number of players

```{r}
mean_rounds <- function(min_players, max_players, nsim) {
  ave_rounds <- numeric(max_players - min_players + 1)
  for (p in min_players:max_players) {
    rounds_list <- numeric(nsim)
    for (i in 1:nsim) {
      rounds_list[i] <- game(n_players = p)
    }
    ave_rounds[p - min_players + 1] <- mean(rounds_list)
  }
  return(ave_rounds)
}

nsim <- 1000
min_players <- 2
max_players <- 10
  
mean_rounds_result <- mean_rounds(min_players, max_players, nsim)

plot(min_players:max_players, 
     mean_rounds_result, 
     #type = "b", 
     col = "blue", 
     pch = 19,
     xlab = "Number of Players", 
     ylab = "Mean Number of Rounds", 
     main = "Mean Rounds vs Number of Players")
```

\*Run simulations in parallel for quicker processing

\*How much money players will have at the end (once all properties are purchased)

\*How many properties each player has

\*Incorporate property taxes

\*Define winning (most properties? most money? most full color combos)
